def is_safe(board, row, col):
    # Check the current column
    for i in range(row):
        if board[i][col] == "Q":
            return False

    # Check the upper left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == "Q":
            return False

    # Check the upper right diagonal
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if board[i][j] == "Q":
            return False

    return True

def solve_n_queens(board, row):
    # If all 8 queens are placed, return True
    if row >= len(board):
        return True

    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row][col] = "Q"  # Place queen
            if solve_n_queens(board, row + 1):  # Recurse to place next queen
                return True
            board[row][col] = "."  # Remove queen (backtrack)

    return False

def print_board(board):
    for row in board:
        print(" ".join(row))

# Initialize the 8x8 board with all empty cells (".")
board = [["." for _ in range(8)] for _ in range(8)]

# Place the first queen manually (example: place at row 0, column 0)
board[0][0] = "Q"

# Solve for the remaining queens
if solve_n_queens(board, 1):
    print("Solution for 8-Queens problem:")
    print_board(board)
else:
    print("No solution exists.")
